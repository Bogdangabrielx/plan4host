/* app/globals.css — global styles shared by the whole app
   IMPORTANT: no landing-specific classes here. Keep homepage styles in home.module.css. */

/* ---------------- Fonts (global) ---------------- */
@font-face {
  font-family: 'Switzer';
  src: url('/fonts/Switzer/Switzer-Variable.ttf') format('truetype-variations');
  font-weight: 100 900;
  font-style: normal;
  font-display: swap;
}
@font-face {
  font-family: 'Switzer';
  src: url('/fonts/Switzer/Switzer-VariableItalic.ttf') format('truetype-variations');
  font-weight: 100 900;
  font-style: italic;
  font-display: swap;
}

/* ---------------- Base reset ---------------- */
*,
*::before,
*::after { box-sizing: border-box; }

html, body { margin: 0; }

body {
  font-family: 'Switzer', ui-sans-serif, system-ui, -apple-system, Segoe UI, Roboto, Inter, Helvetica, Arial, sans-serif;
  background: var(--bg);
  color: var(--text);
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

/* Prevent iOS Safari from auto-zooming focused inputs by ensuring >=16px font-size */
html { -webkit-text-size-adjust: 100%; }
@media (max-width: 640px) {
  :root[data-os="ios"] input:not([type="checkbox"]):not([type="radio"]),
  :root[data-os="ios"] select,
  :root[data-os="ios"] textarea {
    font-size: 16px !important;
  }
}

/* Ambient background is now managed in app/layout.tsx with OKLCH + HSL fallback */

/* Focus ring derived from primary */
:root { --focus-ring: var(--primary); }
@supports (color: oklch(0 0 0)){
  :root { --focus-ring: oklch(from var(--primary) calc(min(1, var(--primary-L) + 0.10)) var(--primary-C) var(--primary-h-ok)); }
}

/* Focus (global) */
a:focus-visible,
button:focus-visible,
[role="button"]:focus-visible,
input:focus-visible,
select:focus-visible,
textarea:focus-visible {
  outline: 2px solid var(--focus-ring);
  outline-offset: 2px;
  border-radius: 8px;
}

/* ---------------- Supabase-style UI primitives (for the app) ---------------- */
/* Card / Panel */
.sb-card {
  background: var(--panel);
  border: 0;
  border-radius: 12px;
  position: relative;
  overflow: hidden;
  /* Soft elevation (fallback in non-OKLCH browsers is added below) */
  box-shadow: 0 6px 18px 0 rgba(0,0,0,.10);
}

/* =============================
   Card tokens + effects (OKLCH)
   ============================= */
@supports (color: oklch(0 0 0)){
  /* Derived effect tokens (relative to seed vars from layout) */
  .sb-card{
    /* Sheen layer (normal) */
    --card-sheen-dL: 0.015;  /* +1.5% luminance */
    --card-sheen-dC: -0.02;  /* -2% chroma      */
    /* Hotspot (hover/focus) */
    --card-hotspot-dL: 0.035; /* +3.5% luminance */
    --card-hotspot-dC: -0.03; /* -3% chroma      */
    /* Border-top reflex deltas (theme-tuned below) */
    --card-top-dL: 0.02;  /* default increase */
    --card-top-dC: -0.03; /* default decrease */
  }
  :root[data-theme="dark"] .sb-card{ --card-top-dL: 0.03; }
  :root[data-theme="light"] .sb-card{ --card-top-dL: -0.012; }

  /* Border top gradient (reflex) — opt-in */
  .sb-card--fx::before{
    content: "";
    position: absolute; left: 0; right: 0; top: 0; height: 3px;
    pointer-events: none;
    /* neutral (near-white) reflex: chroma ~0, no accent tint */
    background: linear-gradient(90deg,
      oklch(calc(var(--card-L) + var(--card-top-dL)) 0 var(--card-h-ok) / 0) 0%,
      oklch(calc(var(--card-L) + var(--card-top-dL)) 0 var(--card-h-ok) / .85) 50%,
      oklch(calc(var(--card-L) + var(--card-top-dL)) 0 var(--card-h-ok) / 0) 100%
    );
    transition: opacity .14s ease, filter .14s ease;
  }

  /* Surface sheen (normal) + hotspot (on hover/focus) — opt-in */
  .sb-card--fx::after{
    content: ""; position: absolute; inset: 0; pointer-events: none;
    background: radial-gradient(120% 160% at 18% 0%,
      oklch(calc(var(--card-L) + var(--card-sheen-dL)) calc(max(0, var(--card-C) + var(--card-sheen-dC))) var(--accent-h)),
      transparent 60%);
    opacity: .22;
    transition: opacity .14s ease;
  }
  .sb-card--fx:hover::after,
  .sb-card--fx:focus-within::after{
    background: radial-gradient(110% 140% at 20% 0%,
      oklch(calc(var(--card-L) + var(--card-hotspot-dL)) calc(max(0, var(--card-C) + var(--card-hotspot-dC))) var(--accent-h)),
      transparent 62%);
    opacity: .32;
  }

  /* Elevation: make lifted shadow always on (theme-tuned) */
  :root[data-theme="dark"] .sb-card{
    box-shadow:
      0 8px 20px 0 oklch(calc(var(--card-L)) calc(var(--card-C)) var(--card-h-ok) / .16),
      /* neutral light lift on dark */
      0 6px 14px 0 oklch(calc(min(1, var(--bg-L) + 0.35)) 0 var(--bg-h-ok) / .14),
      0 1px 0 0 oklch(calc(var(--border-L)) calc(var(--border-C)) var(--border-h-ok) / .6) inset;
  }
  :root[data-theme="light"] .sb-card{
    box-shadow:
      0 8px 20px 0 oklch(calc(var(--card-L)) calc(var(--card-C)) var(--card-h-ok) / .14),
      /* neutral dark lift on light */
      0 6px 14px 0 oklch(calc(max(0, var(--bg-L) - 0.35)) 0 var(--bg-h-ok) / .10),
      0 1px 0 0 oklch(calc(var(--border-L)) calc(var(--border-C)) var(--border-h-ok) / .55) inset;
  }
  /* Lifted state: neutral, smaller shadow (no primary tint) */
  :root[data-theme="dark"] .sb-card:hover,
  :root[data-theme="dark"] .sb-card:focus-within{
    box-shadow:
      0 8px 20px 0 oklch(calc(var(--card-L)) calc(var(--card-C)) var(--card-h-ok) / .16),
      /* neutral light lift on dark */
      0 6px 14px 0 oklch(calc(min(1, var(--bg-L) + 0.35)) 0 var(--bg-h-ok) / .14),
      0 1px 0 0 oklch(calc(var(--border-L)) calc(var(--border-C)) var(--border-h-ok) / .6) inset;
  }
  :root[data-theme="light"] .sb-card:hover,
  :root[data-theme="light"] .sb-card:focus-within{
    box-shadow:
      0 8px 20px 0 oklch(calc(var(--card-L)) calc(var(--card-C)) var(--card-h-ok) / .14),
      /* neutral dark lift on light */
      0 6px 14px 0 oklch(calc(max(0, var(--bg-L) - 0.35)) 0 var(--bg-h-ok) / .10),
      0 1px 0 0 oklch(calc(var(--border-L)) calc(var(--border-C)) var(--border-h-ok) / .55) inset;
  }
}

/* =============================
   Fallback in HSL
   ============================= */
@supports not (color: oklch(0 0 0)){
  .sb-card{
    /* Soft elevation */
    box-shadow: 0 6px 18px 0 hsla(var(--card-h) var(--card-s) var(--card-l) / .12);
  }
  /* Always-on lifted shadow in fallback */
  :root[data-theme="dark"] .sb-card{
    box-shadow:
      0 8px 20px 0 hsla(var(--card-h) var(--card-s) var(--card-l) / .16),
      0 6px 14px 0 hsla(0 0% 100% / .14);
  }
  :root[data-theme="light"] .sb-card{
    box-shadow:
      0 8px 20px 0 hsla(var(--card-h) var(--card-s) var(--card-l) / .14),
      0 6px 14px 0 hsla(0 0% 0% / .10);
  }
  .sb-card--fx::before{
    content: ""; position: absolute; left:0; right:0; top:0; height:3px; pointer-events: none;
    /* neutral reflex in HSL fallback */
    background: linear-gradient(90deg,
      hsl(var(--card-h) 0% calc((var(--card-l) + 2%)) / 0) 0%,
      hsl(var(--card-h) 0% calc((var(--card-l) + 2%)) / .85) 50%,
      hsl(var(--card-h) 0% calc((var(--card-l) + 2%)) / 0) 100%
    );
    transition: opacity .14s ease;
  }
  .sb-card--fx::after{
    content:""; position:absolute; inset:0; pointer-events:none;
    background: radial-gradient(120% 160% at 18% 0%,
      hsl(var(--primary-h) calc((var(--primary-s) - 12%)) calc((var(--card-l) + 1.5%))),
      transparent 60%);
    opacity:.22; transition: opacity .14s ease;
  }
  .sb-card--fx:hover::after, .sb-card--fx:focus-within::after{
    background: radial-gradient(110% 140% at 20% 0%,
      hsl(var(--primary-h) calc((var(--primary-s) - 14%)) calc((var(--card-l) + 3.5%))),
      transparent 62%);
    opacity:.32;
  }
  :root[data-theme="dark"] .sb-card:hover, :root[data-theme="dark"] .sb-card:focus-within{
    box-shadow:
      0 8px 20px 0 hsla(var(--card-h) var(--card-s) var(--card-l) / .16),
      0 6px 14px 0 hsla(0 0% 100% / .14);
  }
  :root[data-theme="light"] .sb-card:hover, :root[data-theme="light"] .sb-card:focus-within{
    box-shadow:
      0 8px 20px 0 hsla(var(--card-h) var(--card-s) var(--card-l) / .14),
      0 6px 14px 0 hsla(0 0% 0% / .10);
  }
}

/* Reduced motion: disable sheen/transitions */
@media (prefers-reduced-motion: reduce){
  .sb-card::before, .sb-card::after{ transition: none !important; }
}

/* Toolbar container */
.sb-toolbar {
  display: flex;
  align-items: center;
  gap: 14px;
  flex-wrap: wrap;
  padding: 6px 2px;
  background: transparent;
  border: 0;
  border-radius: 0;
}

/* Buttons */
.sb-btn {
  -webkit-appearance: none;
  appearance: none;
  display: inline-flex;
  align-items: center;
  justify-content: center;
  gap: 8px;
  padding: 8px 12px;
  border-radius: 999px;
  border: 0;
  background: color-mix(in srgb, var(--card) 88%, transparent);
  color: var(--text);
  font-weight: 800;
  cursor: pointer;
  transition: background-color .15s ease, border-color .15s ease, transform .05s ease;
}
.sb-btn--primary {
  background: var(--primary);
  color: #0c111b;
  border: 1px solid var(--primary);
}
.sb-btn--primary:hover { 
  background: var(--primary-strong);
  border-color: var(--primary-strong);
}
.sb-btn:active { transform: scale(0.99); }
.sb-btn--primary {
  border: 0;
  background: var(--primary);
  color: #0c111b;
}
.sb-btn--ghost { background: transparent; }
.sb-btn--icon { width: 44px; height: 44px; padding: 0; border-radius: 999px; }
.sb-btn--small { padding: 6px 10px; border-radius: 8px; }

/* înlocuiește blocul .sb-select actual */
.sb-select{
  -webkit-appearance: menulist;
  appearance: auto;
  color: var(--text);
  font-family: inherit;
  font-weight: 800;
  line-height: 1.2;
  padding: 10px 14px;
  border-radius: 999px; /* pill */
  /* Glass variables */
  --glass-blur: 9px;
  --glass-sat: 1.25;
  /* Gradient border via background-clip trick */
  border: 1px solid transparent; /* border drawn by 3rd background layer */
  /* layered background: hotspot, inner glass gradient, gradient border */
  background:
    radial-gradient(140% 260% at 18% 0%, color-mix(in srgb, var(--bg) 20%, transparent), transparent 64%),
    linear-gradient(180deg,
      color-mix(in srgb, var(--card) 65%, transparent),
      color-mix(in srgb, var(--card) 35%, transparent)
    ),
    linear-gradient(180deg,
      color-mix(in srgb, var(--border) 55%, transparent),
      color-mix(in srgb, var(--border) 25%, transparent)
    );
  background-clip: padding-box, padding-box, border-box;
  -webkit-backdrop-filter: blur(var(--glass-blur)) saturate(var(--glass-sat));
          backdrop-filter: blur(var(--glass-blur)) saturate(var(--glass-sat));
  /* inner highlight + crisp edge + ultra subtle lift */
  box-shadow:
    /* glossy top edge (stronger) */
    0 1px 0 color-mix(in srgb, #fff 28%, var(--card)) inset,
    /* bottom inner edge (slightly stronger for depth) */
    0 -1px 0 color-mix(in srgb, var(--border) 52%, transparent) inset,
    /* inner glow band near top */
    0 2px 8px color-mix(in srgb, #fff 12%, transparent) inset,
    /* soft inner ambient glow */
    0 0 18px color-mix(in srgb, #fff 10%, transparent) inset,
    /* pill outline */
    0 0 0 1px color-mix(in srgb, var(--border) 60%, transparent) inset,
    /* very small external shadow */
    0 1px 2px color-mix(in srgb, var(--bg) 12%, transparent);
  transition: background-color .15s ease, box-shadow .15s ease, border-color .15s ease, backdrop-filter .2s ease;
}
.sb-select:hover{
  background:
    radial-gradient(140% 240% at 20% 0%, color-mix(in srgb, var(--bg) 26%, transparent), transparent 66%),
    linear-gradient(180deg,
      color-mix(in srgb, var(--card) 68%, transparent),
      color-mix(in srgb, var(--card) 32%, transparent)
    ),
    linear-gradient(180deg,
      color-mix(in srgb, var(--border) 60%, transparent),
      color-mix(in srgb, var(--border) 28%, transparent)
    );
  background-clip: padding-box, padding-box, border-box;
  -webkit-backdrop-filter: blur(calc(var(--glass-blur) + 1px)) saturate(1.3);
          backdrop-filter: blur(calc(var(--glass-blur) + 1px)) saturate(1.3);
  box-shadow:
    /* slightly stronger glossy top edge on hover */
    0 1px 0 color-mix(in srgb, #fff 32%, var(--card)) inset,
    0 -1px 0 color-mix(in srgb, var(--border) 54%, transparent) inset,
    /* brighter inner glow */
    0 3px 10px color-mix(in srgb, #fff 14%, transparent) inset,
    0 0 22px color-mix(in srgb, #fff 12%, transparent) inset,
    0 0 0 1px color-mix(in srgb, var(--border) 65%, transparent) inset,
    /* still very subtle external */
    0 2px 4px color-mix(in srgb, var(--bg) 14%, transparent);
}

/* Reusable glass + glow effect for cards */
/* Usage: add class to any card container, e.g. <div class="sb-card Sb-cardglow"> */
.Sb-cardglow, .sb-cardglow{
  /* Glass controls */
  --glass-blur: 10px;
  --glass-sat: 1.25;

  position: relative;
  border: 1px solid transparent; /* drawn by 3rd background layer */
  /* layered background: hotspot, inner glass gradient, gradient border */
  background:
    radial-gradient(140% 260% at 18% 0%, color-mix(in srgb, var(--bg) 20%, transparent), transparent 64%),
    linear-gradient(180deg,
      color-mix(in srgb, var(--card) 65%, transparent),
      color-mix(in srgb, var(--card) 35%, transparent)
    ),
    linear-gradient(180deg,
      color-mix(in srgb, var(--border) 55%, transparent),
      color-mix(in srgb, var(--border) 25%, transparent)
    );
  background-clip: padding-box, padding-box, border-box;
  -webkit-backdrop-filter: blur(var(--glass-blur)) saturate(var(--glass-sat));
          backdrop-filter: blur(var(--glass-blur)) saturate(var(--glass-sat));
  /* inner highlight + subtle lift + crisp outline */
  box-shadow:
    /* glossy top edge */
    0 1px 0 color-mix(in srgb, #fff 22%, var(--card)) inset,
    /* bottom inner edge */
    0 -1px 0 color-mix(in srgb, var(--border) 52%, transparent) inset,
    /* soft inner ambient glow */
    0 2px 10px color-mix(in srgb, #fff 10%, transparent) inset,
    0 0 22px color-mix(in srgb, #fff 10%, transparent) inset,
    /* crisp inner outline */
    0 0 0 1px color-mix(in srgb, var(--border) 60%, transparent) inset,
    /* subtle external shadow */
    0 8px 22px color-mix(in srgb, var(--bg) 14%, transparent);
  transition: background-color .15s ease, box-shadow .15s ease, border-color .15s ease, backdrop-filter .2s ease;
}
.Sb-cardglow:hover, .Sb-cardglow:focus-within,
.sb-cardglow:hover, .sb-cardglow:focus-within{
  background:
    radial-gradient(140% 240% at 20% 0%, color-mix(in srgb, var(--bg) 26%, transparent), transparent 66%),
    linear-gradient(180deg,
      color-mix(in srgb, var(--card) 68%, transparent),
      color-mix(in srgb, var(--card) 32%, transparent)
    ),
    linear-gradient(180deg,
      color-mix(in srgb, var(--border) 60%, transparent),
      color-mix(in srgb, var(--border) 28%, transparent)
    );
  -webkit-backdrop-filter: blur(calc(var(--glass-blur) + 1px)) saturate(1.3);
          backdrop-filter: blur(calc(var(--glass-blur) + 1px)) saturate(1.3);
  box-shadow:
    0 1px 0 color-mix(in srgb, #fff 28%, var(--card)) inset,
    0 -1px 0 color-mix(in srgb, var(--border) 54%, transparent) inset,
    0 3px 12px color-mix(in srgb, #fff 12%, transparent) inset,
    0 0 26px color-mix(in srgb, #fff 12%, transparent) inset,
    0 0 0 1px color-mix(in srgb, var(--border) 65%, transparent) inset,
    0 10px 26px color-mix(in srgb, var(--bg) 16%, transparent);
}

/* Inside cards, elevate fields slightly (lighter than card on dark; slightly lighter than card on light) */
/* Inside cards, elevate typical fields but preserve custom styling for .sb-select */
.sb-card :where(input, textarea, select):not(.sb-select){
  background: var(--field);
}

select:not(.sb-select){ /* opțional */
  -webkit-appearance: menulist;
  appearance: auto;
  background: var(--card);
  color: var(--text);
  border: 1px solid var(--border);
  border-radius: 10px;
  padding: 8px 12px;
  font-weight: 700;
  font-family: inherit;
}

/* Segmented control */
.sb-seg {
  display: inline-flex;
  background: var(--card);
  border: 1px solid color-mix(in srgb, var(--border) 50%, transparent);
  border-radius: 12px;
  padding: 2px;
}
.sb-seg > button {
  border: 0;
  background: transparent;
  color: var(--text);
  font-weight: 800;
  padding: 6px 10px;
  border-radius: 8px;
  cursor: pointer;
}
.sb-seg > button[data-active="true"] {
  background: var(--primary);
  color: #0c111b;
}

/* Badge */
.sb-badge {
  display: inline-flex;
  align-items: center;
  padding: 4px 8px;
  border-radius: 999px;
  border: 1px solid color-mix(in srgb, var(--border) 50%, transparent);
  background: var(--card);
  color: var(--muted);
  font-size: 12px;
  font-weight: 800;
}

/* Tiny popover */
.sb-popover {
  background: var(--panel);
  border: 1px solid color-mix(in srgb, var(--border) 55%, transparent);
  border-radius: 12px;
  padding: 10px;
  box-shadow: 0 10px 30px rgba(0,0,0,0.25);
}

/* ---------------- Grid helpers used in the app ---------------- */
.config-grid { display: grid; grid-template-columns: 1fr; gap: 16px; align-items: start; }
@media (min-width: 1025px) { .config-grid { grid-template-columns: 280px 1fr; } }

.room-row { display: grid; gap: 10px; grid-template-columns: 1fr auto; grid-template-areas: "name name" "type actions"; align-items: center; }
@media (max-width: 480px) { .room-row { grid-template-columns: 1fr; grid-template-areas: "name" "type" "actions"; } }

.rd-row { display: grid; grid-template-columns: 1fr 160px 90px 90px; gap: 8px; align-items: center; }
@media (max-width: 480px) { .rd-row { grid-template-columns: 1fr; } }

/* Cleaning board defaults: slightly narrower, taller cards */
.cleaning-grid {
  --clean-card-min: 180px;    /* was 200px */
  --clean-card-aspect: 3 / 4; /* taller shape */
}

/* Cleaning board: force 2 columns on phones with small gap */
@media (max-width: 480px) {
  .cleaning-grid {
    /* two cards per row on mobile */
    --clean-grid-cols: repeat(2, minmax(0, 1fr));
    --clean-grid-gap: 8px;
  }
}

/* ---------------- Utilities ---------------- */
.break-anywhere { overflow-wrap: anywhere; word-break: break-word; }

.sr-only {
  position: absolute !important;
  width: 1px; height: 1px;
  padding: 0; margin: -1px; overflow: hidden;
  clip: rect(0, 0, 0, 0); white-space: nowrap; border: 0;
}

/* Custom, discreet scrollbar utility (desktop-oriented) */
/* Apply on a scrollable container: e.g. add class 'sb-scrollbar' */
.sb-scrollbar{
  /* Firefox */
  scrollbar-width: thin;
  scrollbar-color:
    color-mix(in srgb, var(--panel) 85%, transparent)
    color-mix(in srgb, var(--bg) 100%, transparent);
}
/* WebKit/Blink */
.sb-scrollbar::-webkit-scrollbar{ width: var(--sb-size, 10px); height: var(--sb-size, 10px); }
.sb-scrollbar::-webkit-scrollbar-track{
  background: color-mix(in srgb, var(--bg) 100%, transparent);
  border-radius: 999px;
}
.sb-scrollbar::-webkit-scrollbar-thumb{
  background-color: color-mix(in srgb, var(--panel) 88%, transparent);
  border-radius: 999px;
  border: 2px solid color-mix(in srgb, var(--bg) 100%, transparent);
}
.sb-scrollbar:hover::-webkit-scrollbar-thumb{
  background-color: color-mix(in srgb, var(--panel) 94%, transparent);
}

/* ──────────────────────────────────────────────────────────
   .modalCard — animated gradient ring (global)
   Replică .featureCard: hover/focus border ring + fallback
   ────────────────────────────────────────────────────────── */

/* Angle animabil pentru conic-gradient (unde e suportat) */
@property --modal-ring-angle {
  syntax: "<angle>";
  initial-value: 0deg;
  inherits: false;
}

.modalCard{
  /* fallback-uri locale în caz că nu există variabilele temei */
  --modal-card:   var(--card, rgba(12,19,35,.9));
  --modal-border: var(--border, rgba(148,163,184,.18));
  --modal-prim:   var(--primary, #3ECF8E);
  --modal-acc1:   var(--accent1, #22d3ee);
  --modal-acc2:   var(--accent2, rgba(12, 19, 35, 0.9));
  --modal-ring:   var(--ring, 2px);
  --modal-speed:  var(--ring-speed, 2.6s);

  position: relative;
  background: var(--modal-card);
  border: 1px solid var(--modal-border);
  border-radius: 22px;
  padding: 24px;
  transition: box-shadow .15s ease, transform .15s ease, border-color .15s ease;
  will-change: transform;
}
.modalCard > *{ position: relative; z-index: 2; }

.modalCard:hover{
  transform: translateY(-2px);
  /* box-shadow: 0 12px 28px color-mix(in srgb, var(--modal-prim) 45%, transparent); */
}

/* Ineaua animată pe margine (tehnica cu mask) */
.modalCard::before{
  content:"";
  position: absolute;
  inset: 0;
  padding: var(--modal-ring);
  border-radius: inherit;
  background: conic-gradient(
    from var(--modal-ring-angle),
    color-mix(in srgb, var(--bg) 75%, transparent) 0%,
    color-mix(in srgb, var(--bg) 75%, transparent) 25%,
    color-mix(in srgb, var(--modal-prim) 75%, transparent) 50%,
    color-mix(in srgb, var(--bg) 75%, transparent) 75%,
    color-mix(in srgb, var(--bg) 75%, transparent) 100%
  );
  /* arată doar “inelul” (borderul), nu umplutura */
  -webkit-mask:
    linear-gradient(#000 0 0) content-box,
    linear-gradient(#000 0 0);
          mask:
    linear-gradient(#000 0 0) content-box,
    linear-gradient(#000 0 0);
  -webkit-mask-composite: xor;
          mask-composite: exclude;

  pointer-events: none;
  z-index: 1;
  opacity: 0;                                /* ascuns by default */
  animation: modal-ring-spin var(--modal-speed) linear infinite paused;
}

/* Rulează animația la hover/focus (și când containerul are focus înăuntru) */
.modalCard:is(:hover, :focus-within)::before{
  opacity: 1;
  animation-play-state: running;
}

@keyframes modal-ring-spin { to { --modal-ring-angle: 360deg; } }

/* ✅ Trigger manual (mobil sau când vrei să forțezi efectul) */
.modalCard[data-animate="true"]::before{
  opacity: 1;
  animation-play-state: running;
}

/* Fallback pentru browsere fără mask-composite */
@supports not (mask-composite: exclude){
  .modalCard::before{
    inset: calc(-1 * var(--modal-ring));     /* desenează în afara cardului pentru a simula borderul */
    padding: 0;
    -webkit-mask: none;
            mask: none;
    z-index: 0;
    animation: modal-ring-rotate var(--modal-speed) linear infinite paused;
  }
  .modalCard:is(:hover, :focus-within)::before,
  .modalCard[data-animate="true"]::before{
    animation-play-state: running;
    opacity: 1;
  }
  /* “Capac” interior ca să lase un inel subțire vizibil */
  .modalCard::after{
    content:"";
    position:absolute;
    inset: var(--modal-ring);
    border-radius: inherit;
    background: var(--modal-card);
    z-index: 1;
    pointer-events: none;
  }
  @keyframes modal-ring-rotate { to { transform: rotate(360deg); } }
}

:root{
  --safe-top: env(safe-area-inset-top, 0px);
  --safe-bottom: env(safe-area-inset-bottom, 0px);
  --safe-left: env(safe-area-inset-left, 0px);
  --safe-right: env(safe-area-inset-right, 0px);
}
