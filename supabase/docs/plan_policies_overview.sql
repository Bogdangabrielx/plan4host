-- Plan4Host — Plans, Sync, Cleaning, Team — Technical Reference
-- Last updated: generated by Codex CLI
--
-- This file documents the server-side (SQL/RPC) logic that governs
-- subscription plans, autosync/sync-now, Cleaning Board, Team access,
-- and the related triggers, tables, and utility RPCs.
--
-- Everything is written in English for clarity; it is safe to share.

/* =====================================================================
   1) PLAN RULES (SIMPLIFIED)
   ---------------------------------------------------------------------
   All plans: Unlimited properties and rooms.

   - basic
     - Autosync every 60 minutes
     - Sync Now: not allowed
     - Cleaning Board: not available (blocked)
     - Team: not available (blocked)

   - standard
     - Autosync every 30 minutes
     - Sync Now: not allowed
     - Cleaning Board: available
     - Team: not available (blocked)

   - premium
     - Autosync every 10 minutes
     - Sync Now: allowed
     - Cleaning Board: available
     - Team: available (owner only in UI; DB enforces Premium-only)
   ===================================================================== */

/* =====================================================================
   2) CANONICAL TABLES (ACTIVE)
   ---------------------------------------------------------------------
   Core billing/account tables
   - public.billing_plans(slug, name, description, max_properties, max_rooms_per_property,
     sync_interval_minutes, allow_sync_now, features, created_at)
   - public.accounts(id, plan, valid_until, created_at, trial_used)
   - public.account_plan(account_id, plan_slug, status, trial_ends_at, valid_until, created_at, updated_at)
   - public.account_users(account_id, user_id, role, scopes, disabled, created_at)

   Inventory + bookings
   - public.properties(id, owner_id/account_id, name, timezone, check_in_time, check_out_time, ...)
   - public.rooms(id, property_id, name, capacity, sort_index, ...)
   - public.room_types(id, property_id, name, ...)
   - public.bookings(id, property_id, room_id, start_date, end_date, start_time, end_time, status, ...)
   - public.booking_check_values(booking_id, check_id, value)
   - public.booking_text_values(booking_id, field_id, value)

   Cleaning
   - public.cleaning_task_defs(id, property_id, label, sort_index, created_at)
   - public.cleaning_progress(property_id, room_id, clean_date, task_id, done, updated_at)

   iCal / sync
   - public.ical_type_integrations(id, property_id, room_type_id, provider, url, is_active, last_sync, created_at)
   - public.ical_type_sync_logs(id, integration_id, started_at, finished_at, status, added_count, updated_count, conflicts, error_message)
   - public.ical_unassigned_events(id, property_id, room_type_id, uid, summary, start_date, end_date, start_time, end_time, payload, resolved, created_at)
   - public.ical_uid_map(id, property_id, room_type_id, room_id, booking_id, uid, source, start_date, end_date, start_time, end_time, last_seen)
   - public.account_sync_usage(account_id, event, created_at)
   ===================================================================== */

/* =====================================================================
   3) KEY RPC FUNCTIONS (STABLE INTERFACES)
   ---------------------------------------------------------------------
   Plan resolution & limits
   - public.account_effective_plan_slug(p_account_id uuid) -> text
       Returns 'basic' | 'standard' | 'premium' for the given account, considering
       account_plan row (status/expiry) and accounts.valid_until fallback.

   - public.account_plan_limits(p_account_id uuid)
       Returns (plan_slug, max_properties, max_rooms_per_property) from billing_plans.
       With the simplified model, max_* are NULL (unlimited) for all plans.

   Current plan for caller (UI convenience)
   - public.account_current_plan() -> text
       Resolves the effective plan for the current authenticated user (auth.uid()).

   Sync policy
   - public.account_can_sync_now_v2(p_account_id uuid, p_event_type text) -> jsonb
       Reads public.billing_plans for (sync_interval_minutes, allow_sync_now).
       - p_event_type = 'autosync' => cooldown = interval * 60 seconds.
       - p_event_type = 'sync_now' => allowed only if allow_sync_now = true (Premium).
       Uses public.account_sync_usage to compute cooldown and returns JSON:
         { allowed:boolean, reason:'cooldown'|'sync_now_only_on_premium'|..., cooldown_remaining_sec:int|null, ... }

   Sync usage logging
   - public.account_register_sync_usage_v2(p_account_id uuid, p_event_type text)
       Inserts (account_id, event) into public.account_sync_usage (used by policy windows).

   Trial & access mode
   - public.account_grant_trial(p_account_id uuid, p_days int default 7)
       Idempotent helper used on account creation to grant STANDARD 7-day trial.

   - public.account_access_mode() -> text
       Returns: 'full' | 'billing_only' | 'blocked' for the current user. UI redirects
       owners to /app/subscription when in 'billing_only'.

   Plan changes (owner-only)
   - public.account_set_plan(p_account_id uuid, p_plan_slug text, p_valid_days int, p_trial_days int)
       Core setter used by server; updates account_plan + accounts and performs housekeeping.
       (Note: in the simplified model we no longer freeze properties; use for future hooks.)

   - public.account_set_plan_self(p_plan_slug text, p_valid_days int, p_trial_days int)
       SECURITY DEFINER wrapper; derives account from auth.uid(), validates OWNER, and
       delegates to account_set_plan(). Used by the Subscription page.

   Property deletion (owner-only)
   - public.account_delete_property(p_account_id uuid, p_property_id uuid)
       Deletes a property and all dependent data (rooms/types/bookings/ical/cleaning),
       then performs housekeeping.

   - public.account_delete_property_self(p_property_id uuid)
       SECURITY DEFINER wrapper for owners; derives account from property_id and auth.uid().
   ===================================================================== */

/* =====================================================================
  4) TRIGGERS (ACTIVE)
   ---------------------------------------------------------------------
   Team — Premium only
   - public.trg_enforce_team_plan() BEFORE INSERT/UPDATE/DELETE ON public.account_users
     Blocks any change to the team unless the account plan is 'premium'.
     Attached as trigger 'trg_enforce_team_plan' on public.account_users.

   Cleaning — not available on Basic
   - public.trg_enforce_cleaning_plan() BEFORE INSERT/UPDATE/DELETE ON cleaning tables
     Blocks writes on Basic. Attached as 'trg_enforce_cleaning_plan' on:
       public.cleaning_task_defs, public.cleaning_progress

   Trial auto-grant (owner account bootstrap)
   - public.trg_account_auto_trial AFTER INSERT ON public.accounts
     Calls public.account_grant_trial(NEW.id, 7) to start STANDARD 7-day trial.

   Auth onboarding
   - auth.users → public.handle_new_user() AFTER INSERT (trigger name: on_auth_user_created)
     Creates the owner account + membership and grants STANDARD 7‑day trial.
     The function is SECURITY DEFINER and defensive (never blocks user creation).
   ===================================================================== */

/* =====================================================================
   5) BILLING PLAN CONFIG (SINGLE SOURCE OF TRUTH)
   ---------------------------------------------------------------------
   Ensure public.billing_plans contains slugs 'basic' | 'standard' | 'premium' with:

   UPDATE public.billing_plans SET
     max_properties = NULL,
     max_rooms_per_property = NULL,
     sync_interval_minutes = CASE lower(slug)
       WHEN 'premium'  THEN 10
       WHEN 'standard' THEN 30
       ELSE 60
     END,
     allow_sync_now = CASE lower(slug)
       WHEN 'premium' THEN true ELSE false END,
     description = CASE lower(slug)
       WHEN 'basic'    THEN 'Unlimited properties and rooms; autosync every 60 minutes; no Sync Now; no Cleaning Board; no Team.'
       WHEN 'standard' THEN 'Unlimited properties and rooms; autosync every 30 minutes; no Sync Now; Cleaning Board available; no Team.'
       WHEN 'premium'  THEN 'Unlimited properties and rooms; autosync every 10 minutes; Sync Now available; Cleaning Board and Team available.'
       ELSE description
     END,
     features = CASE lower(slug)
       WHEN 'basic'    THEN '["Unlimited properties and rooms","Autosync every 60 minutes"]'::jsonb
       WHEN 'standard' THEN '["Unlimited properties and rooms","Autosync every 30 minutes","Cleaning Board"]'::jsonb
       WHEN 'premium'  THEN '["Unlimited properties and rooms","Autosync every 10 minutes","Sync Now","Cleaning Board","Team"]'::jsonb
       ELSE features
     END
   WHERE lower(slug) IN ('basic','standard','premium');
   ===================================================================== */

/* =====================================================================
   6) OPTIONAL/LEGACY (REMOVED IN THE SIMPLIFIED MODEL)
   ---------------------------------------------------------------------
   The previous model had property quotas (max properties, max rooms), freezing,
   and active-set computations. Those have been removed:

   DROPPED: quota/readonly triggers & helpers
   - trg_enforce_property_quota(), trg_enforce_room_quota()
   - trg_enforce_active_property_write()
   - assert_property_active(uuid,text)
   - property_is_active(uuid)
   - account_active_properties(uuid)
   - enforce_account_freeze(uuid)

   DROPPED: legacy/unused tables
   - ical_integrations, ical_sync_logs
   - cleaning_task_types, cleaning_tasks, task_items
   - room_check_types
   - v_account_effective_plan (redundant)
   ===================================================================== */

/* =====================================================================
   7) RLS (SELECTIVE)
   ---------------------------------------------------------------------
   RLS is enabled on certain tables for scoping data to the account membership.
   Example policies (kept from previous migrations, adjust as needed):

   - public.bookings: policy allowing members with scope 'reservations' (or owner/manager)
     to SELECT/INSERT/UPDATE on bookings of properties where they belong.

   - public.cleaning_task_defs: policy allowing members with scope 'cleaning' (or owner/manager)
     to SELECT/INSERT/UPDATE for the property they belong to.

   Note: Team/Plan gating for Basic/Standard/Premium is enforced by triggers above,
   not by RLS.
   ===================================================================== */

/* =====================================================================
   9) ONBOARDING IMPLEMENTATION (REFERENCE)
   ---------------------------------------------------------------------
   -- Trigger on auth.users
   CREATE TRIGGER on_auth_user_created
     AFTER INSERT ON auth.users
     FOR EACH ROW EXECUTE FUNCTION public.handle_new_user();

   -- Function: public.handle_new_user()
   - SECURITY DEFINER; search_path = public
   - Steps:
     1) INSERT INTO public.accounts(id) VALUES (NEW.id) ON CONFLICT DO NOTHING
     2) INSERT INTO public.account_users(account_id,user_id,role,scopes,disabled)
        VALUES (NEW.id, NEW.id, 'owner', '{}'::text[], false)
        ON CONFLICT(account_id,user_id) DO UPDATE SET role='owner', disabled=false
     3) PERFORM public.account_grant_trial(NEW.id, 7)
   - Defensive: wraps with set_config('app.bypass_property_write','on', true) and catches exceptions.
   ===================================================================== */

/* =====================================================================
   10) BACKFILL (OWNER + TRIAL) FOR EXISTING AUTH USERS
   ---------------------------------------------------------------------
   -- Run once if you already have auth.users but no matching accounts/account_users rows
   DO $$
   DECLARE r RECORD;
   BEGIN
     PERFORM set_config('app.bypass_property_write','on', true);

     INSERT INTO public.accounts(id)
     SELECT u.id FROM auth.users u
     LEFT JOIN public.accounts a ON a.id = u.id
     WHERE a.id IS NULL;

     INSERT INTO public.account_users(account_id, user_id, role, scopes, disabled)
     SELECT u.id, u.id, 'owner', '{}'::text[], false
     FROM auth.users u
     LEFT JOIN public.account_users au ON au.account_id = u.id AND au.user_id = u.id
     WHERE au.user_id IS NULL;

     FOR r IN SELECT id FROM public.accounts LOOP
       PERFORM public.account_grant_trial(r.id, 7);
     END LOOP;

     PERFORM set_config('app.bypass_property_write','off', true);
   END
   $$;
   ===================================================================== */

/* =====================================================================
   11) CURRENT RLS OVERVIEW (SUMMARY)
   ---------------------------------------------------------------------
   Enabled tables (excerpt; adjust as needed):
   - public.accounts: acc_insert/acc_update/acc_delete/acc_select (id = auth.uid()), tenant_select
   - public.account_users: au_insert/au_update/au_delete/au_select (self), team operations additionally gated by trigger (Premium-only)
   - public.account_sync_usage: insert/select by members of the account
   - public.bookings: policies for owner/tenants; additional helper policies p_bookings_reservations_*
   - public.cleaning_task_defs, public.cleaning_progress: member policies for "cleaning" scope; writes further gated by trigger (blocked on Basic)
   - public.ical_type_integrations and public.ical_type_sync_logs: member/owner policies for the property's account
   - public.calendar_settings, room detail tables: member/owner policies per property

   Auth schema (managed by Supabase): auth.users and related tables have RLS enabled by default.
   ===================================================================== */

/* =====================================================================
   12) TROUBLESHOOTING / SAFE OPERATIONS
   ---------------------------------------------------------------------
   - If onboarding fails but you must not break Auth signup, ensure handle_new_user() never raises:
       it already catches exceptions and returns NEW.
   - If legacy triggers remain, remove them (any *freeze*/reconcile triggers or functions).
   - To inspect attachments:
       SELECT event_object_table, trigger_name, action_timing, event_manipulation
       FROM information_schema.triggers
       WHERE trigger_schema='public';
   - To verify plan gating for sync:
       SELECT account_effective_plan_slug(a.id), account_can_sync_now_v2(a.id,'sync_now')
       FROM accounts a;
   ===================================================================== */

/* =====================================================================
   13) API MAP (UI ENDPOINTS)
   ---------------------------------------------------------------------
   Auth
   - POST /api/auth/signup
       Uses Supabase Auth to create user; Auth trigger on_auth_user_created → public.handle_new_user
       creates owner account + membership and grants STANDARD 7‑day trial.
   - POST /api/auth/login
       Signs in (email/password). On success, session cookies set by Supabase SDK.
   - GET  /auth/callback
       Handles OAuth code exchange; redirects to /app.

   Account / Subscription
   - RPC account_current_plan() → text
   - RPC account_effective_plan_slug(p_account_id uuid) → text
   - RPC account_access_mode() → 'full'|'billing_only'|'blocked' (UI redirects owners to /app/subscription on 'billing_only')
   - RPC account_set_plan_self(p_plan_slug text, p_valid_days int, p_trial_days int)
       Owner-only setter used by Subscription page; delegates to account_set_plan.

   Properties & Rooms
   - POST /api/properties
       Creates a property (RLS owner/members); no quotas with simplified plans.
   - RPC account_delete_property_self(p_property_id uuid)
       Owner-only; deletes property with dependencies and performs housekeeping.
   - POST /api/rooms
       Creates room for a property (RLS).
   - GET  /api/rooms/[id].ics
       Generates .ics for a room (busy events from bookings).

   Bookings & Calendar details
   - POST   /api/bookings
       Creates a booking (overlap check, RLS).
   - PATCH  /api/bookings/[id]
       Extends booking end (no shorten) with overlap checks.
   - DELETE /api/bookings/[id]
       Deletes a booking.
   - Client writes to:
       booking_check_values / booking_text_values (RLS); used in RoomDetail modal.

   iCal / Channels
   - POST /api/ical/sync/all
       “Sync Now” for a property — Premium-only via RPC account_can_sync_now_v2('sync_now').
       Logs usage via account_register_sync_usage_v2('sync_now').
   - POST /api/ical/sync/type
       Sync a single integration (room type); same gating on server.
   - GET/POST/HEAD /api/cron/ical/autosync
       Service-role job (requires CRON_ICAL_KEY or x-vercel-cron). Groups by account and enforces
       account_can_sync_now_v2('autosync'); logs one usage per run per account.
   - Bridge endpoints (unassigned inbox for iCal):
       GET  /api/bridge/ical/unassigned/list?propertyId=...
       POST /api/bridge/ical/unassigned/assign  (creates booking from unassigned)
       Auxiliary: /api/bridge/ical/type/list, /api/bridge/ical/type/add

   Cleaning (Configurator & Board)
   - Client reads/writes:
       cleaning_task_defs, cleaning_progress (RLS member policies).
     DB trigger trg_enforce_cleaning_plan blocks INSERT/UPDATE/DELETE on Basic
     (Standard/Premium allowed).

   Team (Premium-only)
   - GET    /api/team/user/list           (client fetch)
   - POST   /api/team/user/create         (Owner-only; roles: member/viewer; plan must be Premium)
   - PATCH  /api/team/user/update         (Owner-only; toggle role member↔viewer, scopes, disabled)
   - PATCH  /api/team/user/password       (Owner-only)
   - POST   /api/team/user/remove         (Owner-only; cannot remove owner)
     DB trigger trg_enforce_team_plan blocks any non-owner membership writes unless plan is Premium.

   Identity / Context
   - GET /api/me
       Returns membership snapshot for current user: role, scopes, disabled, and resolved plan.
   ===================================================================== */

/* =====================================================================
   8) RUNBOOK — QUICK CHECKS
   ---------------------------------------------------------------------
   -- a) Verify plan → policy mapping
   SELECT a.id,
          public.account_effective_plan_slug(a.id) AS plan,
          (public.account_can_sync_now_v2(a.id,'sync_now')->>'allowed')::boolean AS can_sync_now,
          (public.account_can_sync_now_v2(a.id,'autosync')->>'cooldown_remaining_sec')::int AS autosync_cooldown_sec
     FROM public.accounts a
 ORDER BY a.created_at;

   -- b) Check Team/Cleaning triggers attached
   SELECT event_object_table, trigger_name, action_timing, event_manipulation
     FROM information_schema.triggers
    WHERE trigger_schema='public'
      AND trigger_name IN ('trg_enforce_team_plan','trg_enforce_cleaning_plan')
 ORDER BY event_object_table, event_manipulation;

   -- c) Verify billing plans
   SELECT slug, sync_interval_minutes, allow_sync_now, description, features
     FROM public.billing_plans
 ORDER BY lower(slug);

   -- d) Test Sync Now decision (per account)
   SELECT public.account_can_sync_now_v2('<account-uuid>'::uuid, 'sync_now');

   -- e) Trial grant for a fresh account
   SELECT public.account_grant_trial('<account-uuid>'::uuid, 7);

   -- f) Owner-only plan change
   SELECT public.account_set_plan_self('premium', 30, NULL);
   ===================================================================== */

-- End of technical reference
